// <auto-generated />
using System;
using ESCOM_FLEET_SYSTEM.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ESCOM_FLEET_SYSTEM.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210511092749_'jo'")]
    partial class jo
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ESCOM_FLEET_SYSTEM.Models.COF", b =>
                {
                    b.Property<int>("COFId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("COFNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("Expired")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Issued")
                        .HasColumnType("datetime2");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("COFId");

                    b.ToTable("COF");
                });

            modelBuilder.Entity("ESCOM_FLEET_SYSTEM.Models.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("DistrictId")
                        .HasColumnType("int");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int");

                    b.Property<int?>("RegionId")
                        .HasColumnType("int");

                    b.HasKey("DepartmentId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("LocationId");

                    b.HasIndex("RegionId");

                    b.ToTable("Department");
                });

            modelBuilder.Entity("ESCOM_FLEET_SYSTEM.Models.District", b =>
                {
                    b.Property<int>("DistrictId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.Property<string>("DistrictName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("DistrictId");

                    b.ToTable("District");
                });

            modelBuilder.Entity("ESCOM_FLEET_SYSTEM.Models.FleetCategory", b =>
                {
                    b.Property<int>("FleetCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("COFId")
                        .HasColumnType("int");

                    b.Property<double>("Cost")
                        .HasColumnType("float");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<int?>("DistrictId")
                        .HasColumnType("int");

                    b.Property<int?>("InsuranceId")
                        .HasColumnType("int");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("Mileage")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("NumberPlate")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("RegionId")
                        .HasColumnType("int");

                    b.Property<int?>("StationId")
                        .HasColumnType("int");

                    b.Property<string>("TagNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("Year")
                        .HasColumnType("datetime2");

                    b.HasKey("FleetCategoryId");

                    b.HasIndex("COFId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("InsuranceId");

                    b.HasIndex("LocationId");

                    b.HasIndex("RegionId");

                    b.HasIndex("StationId");

                    b.ToTable("FleetCategory");
                });

            modelBuilder.Entity("ESCOM_FLEET_SYSTEM.Models.FleetCustodian", b =>
                {
                    b.Property<int>("FleetCustodianId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("COFId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CollectedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<int?>("DistrictId")
                        .HasColumnType("int");

                    b.Property<int?>("FleetCategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("LicenceId")
                        .HasColumnType("int");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int");

                    b.Property<int?>("RegionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReturnedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("StationId")
                        .HasColumnType("int");

                    b.HasKey("FleetCustodianId");

                    b.HasIndex("COFId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("FleetCategoryId");

                    b.HasIndex("LicenceId");

                    b.HasIndex("LocationId");

                    b.HasIndex("RegionId");

                    b.HasIndex("StationId");

                    b.ToTable("FleetCustodian");
                });

            modelBuilder.Entity("ESCOM_FLEET_SYSTEM.Models.Grounded", b =>
                {
                    b.Property<int>("GroundedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<int?>("DistrictId")
                        .HasColumnType("int");

                    b.Property<int?>("FleetCategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int");

                    b.Property<int?>("RegionId")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("StationId")
                        .HasColumnType("int");

                    b.HasKey("GroundedId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("FleetCategoryId");

                    b.HasIndex("LocationId");

                    b.HasIndex("RegionId");

                    b.HasIndex("StationId");

                    b.ToTable("Grounded");
                });

            modelBuilder.Entity("ESCOM_FLEET_SYSTEM.Models.Insurance", b =>
                {
                    b.Property<int>("InsuranceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("InsuranceNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InsuranceProviderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Issued")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("renewed")
                        .HasColumnType("datetime2");

                    b.HasKey("InsuranceId");

                    b.HasIndex("InsuranceProviderId");

                    b.ToTable("Insurance");
                });

            modelBuilder.Entity("ESCOM_FLEET_SYSTEM.Models.InsuranceProvider", b =>
                {
                    b.Property<int>("InsuranceProviderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("EstablishedYear")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProviderName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ServiceOffered")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("InsuranceProviderId");

                    b.ToTable("InsuranceProvider");
                });

            modelBuilder.Entity("ESCOM_FLEET_SYSTEM.Models.Licence", b =>
                {
                    b.Property<int>("LicenceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("EmployeeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("EmployeeNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("ExpiredDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("IssuedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LicenceNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ProfilePicture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RenewedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("LicenceId");

                    b.ToTable("Licences");
                });

            modelBuilder.Entity("ESCOM_FLEET_SYSTEM.Models.Location", b =>
                {
                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.Property<string>("LocationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.HasKey("LocationId");

                    b.ToTable("Location");
                });

            modelBuilder.Entity("ESCOM_FLEET_SYSTEM.Models.Region", b =>
                {
                    b.Property<int>("RegionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.Property<string>("RegionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.HasKey("RegionId");

                    b.ToTable("Region");
                });

            modelBuilder.Entity("ESCOM_FLEET_SYSTEM.Models.Station", b =>
                {
                    b.Property<int>("StationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("DepartmentId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("DistrictId")
                        .HasColumnType("int");

                    b.Property<int?>("LocationId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("RegionId")
                        .HasColumnType("int");

                    b.Property<string>("StationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("StationId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("LocationId");

                    b.HasIndex("RegionId");

                    b.ToTable("Station");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ESCOM_FLEET_SYSTEM.Models.Department", b =>
                {
                    b.HasOne("ESCOM_FLEET_SYSTEM.Models.District", null)
                        .WithMany("Department")
                        .HasForeignKey("DistrictId");

                    b.HasOne("ESCOM_FLEET_SYSTEM.Models.Location", null)
                        .WithMany("Department")
                        .HasForeignKey("LocationId");

                    b.HasOne("ESCOM_FLEET_SYSTEM.Models.Region", null)
                        .WithMany("Department")
                        .HasForeignKey("RegionId");
                });

            modelBuilder.Entity("ESCOM_FLEET_SYSTEM.Models.FleetCategory", b =>
                {
                    b.HasOne("ESCOM_FLEET_SYSTEM.Models.COF", "COFNumber")
                        .WithMany("FleetCategory")
                        .HasForeignKey("COFId");

                    b.HasOne("ESCOM_FLEET_SYSTEM.Models.Department", "DepartmentName")
                        .WithMany("FleetCategory")
                        .HasForeignKey("DepartmentId");

                    b.HasOne("ESCOM_FLEET_SYSTEM.Models.District", "DistrictName")
                        .WithMany("FleetCategory")
                        .HasForeignKey("DistrictId");

                    b.HasOne("ESCOM_FLEET_SYSTEM.Models.Insurance", "InsuranceNumber")
                        .WithMany("FleetCategory")
                        .HasForeignKey("InsuranceId");

                    b.HasOne("ESCOM_FLEET_SYSTEM.Models.Location", "LocationName")
                        .WithMany("FleetCategory")
                        .HasForeignKey("LocationId");

                    b.HasOne("ESCOM_FLEET_SYSTEM.Models.Region", "RegionName")
                        .WithMany("FleetCategory")
                        .HasForeignKey("RegionId");

                    b.HasOne("ESCOM_FLEET_SYSTEM.Models.Station", "Station")
                        .WithMany("FleetCategory")
                        .HasForeignKey("StationId");
                });

            modelBuilder.Entity("ESCOM_FLEET_SYSTEM.Models.FleetCustodian", b =>
                {
                    b.HasOne("ESCOM_FLEET_SYSTEM.Models.COF", "COFNumber")
                        .WithMany()
                        .HasForeignKey("COFId");

                    b.HasOne("ESCOM_FLEET_SYSTEM.Models.Department", "DepartmentName")
                        .WithMany("FleetCustodians")
                        .HasForeignKey("DepartmentId");

                    b.HasOne("ESCOM_FLEET_SYSTEM.Models.District", null)
                        .WithMany("FleetCustodian")
                        .HasForeignKey("DistrictId");

                    b.HasOne("ESCOM_FLEET_SYSTEM.Models.FleetCategory", "NumberPlate")
                        .WithMany("FleetCustodians")
                        .HasForeignKey("FleetCategoryId");

                    b.HasOne("ESCOM_FLEET_SYSTEM.Models.Licence", "LicenceNumber")
                        .WithMany("FleetCustodians")
                        .HasForeignKey("LicenceId");

                    b.HasOne("ESCOM_FLEET_SYSTEM.Models.Location", null)
                        .WithMany("FleetCustodian")
                        .HasForeignKey("LocationId");

                    b.HasOne("ESCOM_FLEET_SYSTEM.Models.Region", null)
                        .WithMany("FleetCustodian")
                        .HasForeignKey("RegionId");

                    b.HasOne("ESCOM_FLEET_SYSTEM.Models.Station", "StationName")
                        .WithMany("FleetCustodian")
                        .HasForeignKey("StationId");
                });

            modelBuilder.Entity("ESCOM_FLEET_SYSTEM.Models.Grounded", b =>
                {
                    b.HasOne("ESCOM_FLEET_SYSTEM.Models.Department", "Department")
                        .WithMany("Grounded")
                        .HasForeignKey("DepartmentId");

                    b.HasOne("ESCOM_FLEET_SYSTEM.Models.District", null)
                        .WithMany("Grounded")
                        .HasForeignKey("DistrictId");

                    b.HasOne("ESCOM_FLEET_SYSTEM.Models.FleetCategory", "NumberPlate")
                        .WithMany("Grounded")
                        .HasForeignKey("FleetCategoryId");

                    b.HasOne("ESCOM_FLEET_SYSTEM.Models.Location", null)
                        .WithMany("Grounded")
                        .HasForeignKey("LocationId");

                    b.HasOne("ESCOM_FLEET_SYSTEM.Models.Region", null)
                        .WithMany("Grounded")
                        .HasForeignKey("RegionId");

                    b.HasOne("ESCOM_FLEET_SYSTEM.Models.Station", "Station")
                        .WithMany("Grounded")
                        .HasForeignKey("StationId");
                });

            modelBuilder.Entity("ESCOM_FLEET_SYSTEM.Models.Insurance", b =>
                {
                    b.HasOne("ESCOM_FLEET_SYSTEM.Models.InsuranceProvider", "InsuranceProvider")
                        .WithMany()
                        .HasForeignKey("InsuranceProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ESCOM_FLEET_SYSTEM.Models.Station", b =>
                {
                    b.HasOne("ESCOM_FLEET_SYSTEM.Models.Department", "DepartmentName")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESCOM_FLEET_SYSTEM.Models.District", "DistrictName")
                        .WithMany("Station")
                        .HasForeignKey("DistrictId");

                    b.HasOne("ESCOM_FLEET_SYSTEM.Models.Location", "LocationName")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESCOM_FLEET_SYSTEM.Models.Region", "RegionName")
                        .WithMany()
                        .HasForeignKey("RegionId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
